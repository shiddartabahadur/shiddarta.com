{"componentChunkName":"component---src-templates-blog-post-js","path":"/machine-learning/Error-Handling-in-Functional-Data-Operation/","result":{"data":{"site":{"siteMetadata":{"title":"syd-dev.com ","author":"[SHIDDARTA BAHADUR]","siteUrl":"https://syd-dev.com","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"594d2f73-fc2a-52f4-bc69-bd710e7d2447","excerpt":"implemented previously has hit a bottleneck due to a lack of built-in error handling. A few things to note: We are now dealing with . The question is, can we do better? This is a follow-up to the article: Making Core Data Functional. Before we start, here’s a quick overview of F…","html":"<blockquote>\n<p><code class=\"language-text\">FunctionalDataOperation</code> implemented previously has hit a bottleneck due to a lack of built-in error handling.</p>\n</blockquote>\n<h2 id=\"a-few-things-to-note\" style=\"position:relative;\"><a href=\"#a-few-things-to-note\" aria-label=\"a few things to note permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A few things to note:</h2>\n<ul>\n<li>We are now dealing with <code class=\"language-text\">FunctionalDataOperation&lt;Result&lt;Element, AnyError>></code>. The question is, can we do better?</li>\n<li>This is a follow-up to the article: Making Core Data Functional.</li>\n<li>Before we start, here’s a quick overview of FunctionalDataOperation.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> operation <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Element</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span> <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> operation<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operation <span class=\"token operator\">=</span> operation\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Element</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Element</span><span class=\"token operator\">!</span>\n        context<span class=\"token punctuation\">.</span>performAndWait <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">operateAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">,</span>\n                             <span class=\"token number\">_</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> operation <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operation\n        context<span class=\"token punctuation\">.</span>perform <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token builtin\">map</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> f<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NewElement</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> ctx <span class=\"token keyword\">in</span>\n            <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> flatMap<span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> f<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> ctx <span class=\"token keyword\">in</span>\n            <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span>ctx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> zip<span class=\"token operator\">&lt;</span>A<span class=\"token punctuation\">,</span> B<span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">_</span> firstOperation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span>A<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> secondOperation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span>B<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">FunctionalDataOperation</span> <span class=\"token punctuation\">{</span> ctx <span class=\"token keyword\">in</span>\n        <span class=\"token punctuation\">(</span>firstOperation<span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> secondOperation<span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"functional-data-operation\" style=\"position:relative;\"><a href=\"#functional-data-operation\" aria-label=\"functional data operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Data Operation</h2>\n<p>What’s wrong with FunctionalDataOperation&#x3C;Result&#x3C;Element, AnyError>>?</p>\n<p>Ok, I’ll briefly show you how things break apart when we perform a flatMap operation on <code class=\"language-text\">FunctionalDataOperation&lt;Result&lt;Element,Error>></code>.</p>\n<p>This is what we have if it were to always return <code class=\"language-text\">Result</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> operation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we shall start with implementing a little helper function <code class=\"language-text\">fetchOperation</code> that takes in a fetch request and returns an operation.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> fetchOperation<span class=\"token operator\">&lt;</span><span class=\"token builtin\">ResultType</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">(</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">ResultType</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">FunctionalDataOperation</span> <span class=\"token punctuation\">{</span> context <span class=\"token keyword\">in</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">fetching</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we assume – there is a <code class=\"language-text\">FunctionalDataOperation</code> that returns the name of a <code class=\"language-text\">Game</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> nameOperation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span><span class=\"token operator\">></span></code></pre></div>\n<p>After that, a function that creates a fetch operation that filters our games by name.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchGamesOperation</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Game</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> gameRequest <span class=\"token operator\">=</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Game</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>entityName<span class=\"token punctuation\">:</span> “<span class=\"token builtin\">Game</span>”<span class=\"token punctuation\">)</span>\n    gameRequest<span class=\"token punctuation\">.</span>predicate <span class=\"token operator\">=</span> <span class=\"token function\">NSPredicate</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">:</span> “name <span class=\"token operator\">==</span> <span class=\"token operator\">%</span>@“<span class=\"token punctuation\">,</span> named<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetchOperation</span><span class=\"token punctuation\">(</span>gameRequest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, applying <code class=\"language-text\">flatMap</code> to hook these two operations together:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> filteredGamesOperation <span class=\"token operator\">=</span> nameOperation<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> nameResult <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">FunctionalDataOperation</span> <span class=\"token punctuation\">{</span> context <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">return</span> nameResult<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> name <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">fetchGamesOperation</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See how that’s total a disaster? It was supposed to be just a simple flatMap.</p>\n<h2 id=\"introducing-resultfcd\" style=\"position:relative;\"><a href=\"#introducing-resultfcd\" aria-label=\"introducing resultfcd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introducing ResultFCD</h2>\n<p>I was inspired by Haskell’s Data.Either and IO type. IO type is essentially a lazily evaluated closure that we usually put side effects in, like reading from file or printing to console. Quite often, IO has a failure state, which means it will return an Either saying it’s either successful or failed. But having IO&#x3C;Either&#x3C;Success, Error>> everywhere would cause the problems we are currently facing, so they created <code class=\"language-text\">EitherIO</code>.</p>\n<p><code class=\"language-text\">ResultFDO</code> follows the name convention of putting the inner container first and then the outer container second. But ResultFunctionalDataOperation is a bit too long, so it’s been shortened down to <code class=\"language-text\">ResultFDO</code>. After all, IO is also an abbreviation, right?</p>\n<p>It is straightforward to implement, starting with its only property.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Swift</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> operation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> operation<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operation <span class=\"token operator\">=</span> <span class=\"token function\">FunctionalDataOperation</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There’s also a convenience initialiser so we can have a similar syntax to <code class=\"language-text\">FunctionalDataOperation</code> which we could get access to the context directly.</p>\n<p>Similarly, it should also have <code class=\"language-text\">operate</code> and <code class=\"language-text\">operateAsync</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> operation<span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> operateAsync\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        operation<span class=\"token punctuation\">.</span><span class=\"token function\">operateAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Along with <code class=\"language-text\">map</code> and <code class=\"language-text\">flatMap</code> operations:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">ResultFDO</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token builtin\">map</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> f<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NewElement</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">:</span> operation<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> flatMap<span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> f<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NewElement</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> ctx <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operation<span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I encourage you to try to create it yourself and only reference this when stuck, even though <code class=\"language-text\">FlatMap</code> might seem intimidating at first.</p>\n<h2 id=\"error-handling-the-right-way\" style=\"position:relative;\"><a href=\"#error-handling-the-right-way\" aria-label=\"error handling the right way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Handling the Right-way</h2>\n<p>Actually, why are we doing this instead of just using a <code class=\"language-text\">typealias</code>? This wrapper type seems a little redundant, no? Too bad that we can’t write an extension to type alias easily, plus I didn’t think it’s justifiable to extend <code class=\"language-text\">FunctionalDataOperation</code> to constrain its <code class=\"language-text\">Element</code> to a Result. This seemed cleaner.</p>\n<p>Comparing <code class=\"language-text\">ResultFDO</code> to <code class=\"language-text\">FunctionalDataOperation&lt;Result&lt;Element,Error>></code>, now it’s much easier to navigate our minds between various functional operations such as map, flatMap,sequence .</p>\n<p>Let’s rewrite fetchOperation function to return ResultFDO instead of a <code class=\"language-text\">FunctionalDataOperation</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> fetchOperation<span class=\"token operator\">&lt;</span><span class=\"token builtin\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">ResultType</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">ResultFDO</span> <span class=\"token punctuation\">{</span> context <span class=\"token keyword\">in</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">fetching</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here’s how the calling code would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> gameRequest <span class=\"token operator\">=</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Game</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>entityName<span class=\"token punctuation\">:</span> “<span class=\"token builtin\">Game</span>”<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> gameOperation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Game</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">fetchOperation</span><span class=\"token punctuation\">(</span>gameRequest<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> gameResult<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Game</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> gameOperation<span class=\"token punctuation\">.</span><span class=\"token function\">operate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not much has changed, but that was kinda expected. <code class=\"language-text\">ResultFDO</code> was meant to serve as a wrapper type, so it would make sense they have similar APIs.</p>\n<p>What about <code class=\"language-text\">map</code>?</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> namesOperation <span class=\"token operator\">=</span> gameOperation<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getNameSafely<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Type: DataOperation&lt;Result&lt;[String],AnyError></span></code></pre></div>\n<p>That’s exactly what we would expect from a container! There are not extraneous map calls. Then what about <code class=\"language-text\">flatMap</code>?</p>\n<p>Similarly, we assume we have a <code class=\"language-text\">ResultFDO</code> that gives us a game’s name.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> namesOperation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span></code></pre></div>\n<p>And then we rewrite a <code class=\"language-text\">fetchGamesOp</code> in terms of ResultFDO, changing only the return signature.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">fetchGamesOp</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Game</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> gameRequest <span class=\"token operator\">=</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Game</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>entityName<span class=\"token punctuation\">:</span> “<span class=\"token builtin\">Game</span>”<span class=\"token punctuation\">)</span>\n    gameRequest<span class=\"token punctuation\">.</span>predicate <span class=\"token operator\">=</span> <span class=\"token function\">NSPredicate</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">:</span> “name <span class=\"token operator\">==</span> <span class=\"token operator\">%</span>@“<span class=\"token punctuation\">,</span> named<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetchOperation</span><span class=\"token punctuation\">(</span>gameRequest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then finally, we hook them up together.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> filteredGamesOp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Game</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AnyError</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> nameOperation<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>fetchDogsOp<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sweet! It’s now simplified to just one call.</p>\n<p>You might need to spend a bit of time to implement a brand new container and its methods, but it will be worthy of your time if this nested combination is used often enough.</p>\n<h2 id=\"doing-the-heavy-lifting\" style=\"position:relative;\"><a href=\"#doing-the-heavy-lifting\" aria-label=\"doing the heavy lifting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Doing the Heavy-lifting</h2>\n<p>In our previous article of (Re)implementing Result type, we talked about using <code class=\"language-text\">lift</code> on nested wrapper types. Its primary purpose is to make it easy for the underlying types to be “lifted” into its world. In our use-case, the underlying types are <code class=\"language-text\">FunctionalDataOperation</code> and <code class=\"language-text\">Result</code>.</p>\n<p>So we can implement two <code class=\"language-text\">lift</code> functions that do exactly that.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">//// Lifts a Result into ResultFDO</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> lift<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">_</span> result<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">ResultFDO</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span> result <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//// Lifts a FunctionalDataOperation into a ResultFDO</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> lift<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">_</span> operation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FunctionalDataOperation</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ResultFDO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ResultFDO</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">:</span> operation<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Result</span><span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>P/S: Result.success is a function shorthand for { Result.success($0) } .</p>\n<p>These are useful when you have a <code class=\"language-text\">FunctionalDataOperation</code> and you want to use flatMap into a ResultFDO. Instead of calling map on the <code class=\"language-text\">FunctionalDataOperation</code> and getting it a mess, it’s better to just lift it to <code class=\"language-text\">ResultFDO</code> and then call flatMap.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>It is not the purpose of this article to show you the implementation details of <code class=\"language-text\">ResultFDO</code>, rather it is to show you the importance of separating concerns for different containers. For instance, the purpose of <code class=\"language-text\">FunctionalDataOperation</code> is primarily thread management, so it should just focus on that, and we should not introduce the Result type to it. It may sound ironic but the key to making nested containers easy to deal with is by introducing new containers as demonstrated in this article. The upfront cost of doing so is little but can save us a lot of time in the long run.</p>\n<h2 id=\"wrapper-ception\" style=\"position:relative;\"><a href=\"#wrapper-ception\" aria-label=\"wrapper ception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapper-ception</h2>\n<p>I hope this article has inspired you to consider abstracting those nested containers you have been using (and hating all along!). Next up, I will be integrating Point-free’s randomness container <code class=\"language-text\">Gen</code> into <code class=\"language-text\">ResultFDO</code> which would then allow us to have a more controllable seeding of our CoreData context (for testing). Then, I will apply the same concept again to justify another container for wrapping our <code class=\"language-text\">ResultFDO</code> as otherwise, we would need to deal with up to three levels deep of containers.</p>\n<p>For any feedback (or just to say hi), buzz me😊</p>","frontmatter":{"title":"Error Handling in Functional Data Operation","date":"18/05/2021","showToc":true}}},"pageContext":{"slug":"/machine-learning/Error-Handling-in-Functional-Data-Operation/","previous":{"fields":{"slug":"/machine-learning/Making-Core-Data-Functional/"},"frontmatter":{"title":"Making Core Data Functional","category":"iOS","draft":false,"showToc":true}},"next":null}},"staticQueryHashes":["3128451518","4154702432"]}